# docker/compose/docker-compose.yml
# Повністю виправлена версія без container_name для масштабованих сервісів

services:

  # 1. Nginx (Reverse Proxy + HTTPS)
  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ../nginx/ssl:/etc/nginx/ssl
      - static_volume_dev:/usr/src/app/staticfiles
      - media_volume_dev:/usr/src/app/mediafiles
    depends_on:
      - backend
      - frontend
    deploy:
      mode: replicated
      replicas: 1
    restart: unless-stopped

  # 2. Backend (Django + Daphne)
  backend:
    build:
      context: ../..
      dockerfile: docker/django/Dockerfile
    command: daphne -b 0.0.0.0 -p 8000 backend_project.asgi:application
    volumes:
      - ../../backend:/usr/src/app
      - static_volume_dev:/usr/src/app/staticfiles
      - media_volume_dev:/usr/src/app/mediafiles
    environment:
      - DJANGO_SETTINGS_MODULE=backend_project.settings
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    env_file:
      - ../../backend/.env.dev
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 2  # балансування

  # 3. Frontend (React)
  frontend:
    build:
      context: ../..
      dockerfile: docker/react/Dockerfile
    volumes:
      - /app/node_modules
    depends_on:
      - backend
    deploy:
      mode: replicated
      replicas: 1
    

  # 4. PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: lu_db_dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    env_file:
      - ../../backend/.env.dev
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust

  # 5. Redis
  redis:
    image: redis:7-alpine
    container_name: lu_redis_dev
    ports:
      - "6379:6379"

  # 6. Celery Worker
  celery_worker:
    build:
      context: ../..
      dockerfile: docker/django/Dockerfile
    command: watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A config.celery worker -l info
    volumes:
      - ../../backend:/usr/src/app
      - media_volume_dev:/usr/src/app/mediafiles
    env_file:
      - ../../backend/.env.dev
    depends_on:
      - redis
      - db
    environment:
      - DJANGO_SETTINGS_MODULE=backend_project.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    deploy:
      mode: replicated
      replicas: 1

  # 7. Autoscaler
  autoscaler:
    build:
      context: ../../docker/autoscaler
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_QUEUE_NAME=celery
      - SERVICE_TO_SCALE=compose_celery_worker
      - MIN_REPLICAS=1
      - MAX_REPLICAS=5
      - TASKS_PER_WORKER=2
      - SLEEP_TIME=10
    depends_on:
      - redis
    deploy:
      mode: replicated
      replicas: 1

volumes:
  postgres_data_dev:
  static_volume_dev:
  media_volume_dev:
